<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title></title>
      <url>/%E6%AC%A7%E6%B0%8F%E8%B7%9D%E7%A6%BB.html</url>
      <content type="html"><![CDATA[<h1 id="欧氏距离"><a href="#欧氏距离" class="headerlink" title="欧氏距离"></a>欧氏距离</h1><p>欧氏距离一般只欧几里得度量，在数学中，欧几里得距离或欧几里得度量是欧几里得空间中<strong>两点间“普通”（即直线）距离</strong>。使用这个距离，欧氏空间成为度量空间。相关联的范数称为欧几里得范数。较早的文献称之为毕达哥拉斯度量。</p>
<p>欧几里得度量（euclidean metric）（也称欧氏距离）是一个通常采用的距离定义，指在m维空间中两个点之间的真实距离，或者向量的自然长度（即该点到原点的距离）。在二维和三维空间中的欧氏距离就是两点之间的实际距离</p>
<h3 id="二维空间的公式"><a href="#二维空间的公式" class="headerlink" title="二维空间的公式"></a>二维空间的公式</h3><p><img src="https://gss2.bdstatic.com/9fo3dSag_xI4khGkpoWK1HF6hhy/baike/pic/item/e7cd7b899e510fb335a3e2f3d533c895d1430c1f.jpg" alt="img"></p>
<p>其中，<img src="https://gss3.bdstatic.com/-Po3dSag_xI4khGkpoWK1HF6hhy/baike/pic/item/9f2f070828381f3082f81bcda5014c086f06f0f5.jpg" alt="img"> 为点 <img src="https://gss3.bdstatic.com/7Po3dSag_xI4khGkpoWK1HF6hhy/baike/pic/item/18d8bc3eb13533fa7d07024aa4d3fd1f41345b25.jpg" alt="img">之间的欧氏距离；<img src="https://gss1.bdstatic.com/-vo3dSag_xI4khGkpoWK1HF6hhy/baike/pic/item/a9d3fd1f4134970a3516814b99cad1c8a7865d68.jpg" alt="img"> 到原点的欧氏距离。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[LINUX使用笔记]]></title>
      <url>/linux%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0.html</url>
      <content type="html"><![CDATA[<ol>
<li><p>使用Vim对多行代码进行注释</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">【Ctrl】+【V】进入列编辑模式，向下或向上移动光标，把需要注释的行的开头标记起来，然后按大写的I（【Shift】+【I】），再插入注释符，比如<span class="string">"//"</span>，再按Esc，即可全部注释。</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用Vim，批量去掉注释：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">【Ctrl】+【V】，进入列编辑模式，横向选中列的个数（如<span class="string">"//"</span>注释符号，需要选中两列），然后按【D】，就会删除注释符号</span><br></pre></td></tr></table></figure>
</li>
<li><p>Vim取消搜索后的高亮：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">：noh</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="4">
<li><p>linux 如何将一个大文件分成几个小文件</p>
<p>1.命令：split，例子：<br>2.以行数拆分 -l参数：<br>3.split –l 50 原始文件 拆分后文件名前缀<br>4.说明：以50行对文件进行拆分，最后一个文件的行数没有50行以实际行数进行分配，比如有一个名为 wlan_date.txt的文件，公有120行，进行拆分：<br>split -l 50 wlan_date.txt wlan  </p>
</li>
<li><p>添加/删除某个环境变量</p>
<p>export LD_LIBRARY_PATH =/you/path/to:$LD_LIBRARY_PATH   添加环境变量</p>
<p>unset LD_LIBRARY_PATH 删除环境变量</p>
<p>需要修改/etc/profile </p>
<p>非root用户需要修改~/.bashrc</p>
<p>并使用source ~/.bashrc</p>
</li>
<li><p>删除某个文件的第一行</p>
<p>sed -i ‘1d’ filename</p>
</li>
<li><p>删除文件中的换行符\n</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tr '\n' ' ' &lt; filename|sed 's/ //g' &gt; newfilename</span><br></pre></td></tr></table></figure>

</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[常用生物学、肿瘤学知识]]></title>
      <url>/biology-knowledge.html</url>
      <content type="html"><![CDATA[<h1 id="常用生物学、肿瘤学知识"><a href="#常用生物学、肿瘤学知识" class="headerlink" title="常用生物学、肿瘤学知识"></a>常用生物学、肿瘤学知识</h1><ul>
<li><p>5’ UTR，3’ UTR 叫作 untranslated region ,而 introns 叫作 non-coding RNA。一段基因序列上包含外显子和内含子，转录的时候，pre-RNA就是前体RAN上会有内含子和外显子，成为成熟RNA时，内含子已经被剪切了，只保留外显子，所以内含子叫作非编码RNA（non-coding RNA）。但成熟的RNA上也是有一部分序列并不翻译成蛋白质，就是非翻译区域（untranslated region），包括上游的 5’ UTR，下游的3’ UTR。<img src="C:%5CUsers%5Cgedon%5CDocuments%5C%E6%9C%AA%E5%91%BD%E5%90%8D%E5%9B%BE%E7%89%87.png" alt="未命名图片"></p>
</li>
<li><p>ncRNA:非编码RNA</p>
</li>
<li><p>intergenic：基因间隔区/基因间区（intergenic region），它不为氨基酸编码，长短不一，短的仅几个核苷酸。在真核生物中它可能向含一些调控序列</p>
</li>
<li><p>splicing：剪接 ###不太明白指的是什么位置</p>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> 生物学知识 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python3学习入门]]></title>
      <url>/Python3.html</url>
      <content type="html"><![CDATA[<h1 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h1><h2 id="python3入门-practice"><a href="#python3入门-practice" class="headerlink" title="python3入门 practice"></a>python3入门 practice</h2><ul>
<li><strong>Python3 <code>Input()</code></strong> 拿到的是字符而不是数字<blockquote>
<h3 id="IF"><a href="#IF" class="headerlink" title="IF"></a><strong>IF</strong></h3></blockquote>
</li>
</ul>
<hr>
<p> <strong>python</strong>中<code>if</code>的语法为</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件</span><br><span class="line">    选择执行的语句</span><br></pre></td></tr></table></figure>

<p>  <code>if</code>内部的语句需要有一个统一的缩进（就是指每一行开头的空格），一般用四个空格。缩进表示这些代码属于这个<code>if</code>条件内部，是一个“代码块”。Python用这种方法替代了其他语言的<code>{}</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">age = int(input())</span><br><span class="line"><span class="keyword">if</span> age &gt; = <span class="number">18</span>:</span><br><span class="line">    print(<span class="string">"你是个成年人了！"</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">num =<span class="number">10</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">'Guess what I think?'</span>) </span><br><span class="line">answer = int(input()) </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> answer&lt;num: </span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'too small!'</span>) </span><br><span class="line"><span class="keyword">if</span> answer&gt;num: </span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'too big!'</span>) </span><br><span class="line"><span class="keyword">if</span> answer==num: </span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'BINGO!'</span>)</span><br></pre></td></tr></table></figure>

<p> <code>if</code>在编程语言中被称为“<strong>控制流语句</strong>”，用来控制程序的执行顺序。</p>
<a id="more"></a>

<blockquote>
<h3 id="While"><a href="#While" class="headerlink" title="While"></a><strong>While</strong></h3></blockquote>
<hr>
<p>  语法为：<br>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 条件：</span><br><span class="line">    循环执行的语句</span><br></pre></td></tr></table></figure></p>
<p> 举例子：<br> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a =<span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> a != <span class="number">0</span> :</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'please input'</span>)</span><br><span class="line">    a = int(input())</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'over'</span>)</span><br></pre></td></tr></table></figure></p>
<p>程序执行后，会不断想你询问输入，直到你输入0，条件不满足，循环结束</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">5</span></span><br><span class="line">bingo = <span class="literal">False</span></span><br><span class="line">print(<span class="string">'Guess what i think'</span>)</span><br><span class="line"><span class="keyword">while</span> bingo == <span class="literal">False</span>:    </span><br><span class="line">    a = int(input())    </span><br><span class="line">    <span class="keyword">if</span> a &gt; num:        </span><br><span class="line">        print(<span class="string">"bigger than it"</span>)    </span><br><span class="line">   <span class="keyword">if</span> a &lt; num:        </span><br><span class="line">        print(<span class="string">"smaller than it"</span>)    </span><br><span class="line">   <span class="keyword">if</span> a == num:       </span><br><span class="line">        print(<span class="string">'Bingo'</span>)        </span><br><span class="line">        bingo = <span class="literal">True</span></span><br></pre></td></tr></table></figure>

<blockquote>
<h3 id="Random"><a href="#Random" class="headerlink" title="Random"></a>Random</h3></blockquote>
<hr>
<p> 引入模块的方法：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> 模块名 <span class="keyword">import</span> 方法名</span><br></pre></td></tr></table></figure>

<p>  产生随机的整数，需要加载的模块</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br></pre></td></tr></table></figure>

<p> 使用randint(),括号中要提供两个数字，分别是产生随机整数范围的下限和上限。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">randint(<span class="number">5</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure>

<p> 更改小游戏的代码</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line">num = randint(<span class="number">1</span>, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'Guess what I think?'</span>)</span><br><span class="line">bingo = <span class="literal">False</span></span><br><span class="line"><span class="keyword">while</span> bingo == <span class="literal">False</span>:</span><br><span class="line">    answer = int(input())</span><br><span class="line">    <span class="keyword">if</span> answer &lt; num:</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">'too small'</span>)</span><br><span class="line">    <span class="keyword">if</span> answer &gt; num:</span><br><span class="line">        print(<span class="string">'too big'</span>)</span><br><span class="line">    <span class="keyword">if</span> answer == num:</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">'BINGO'</span>)</span><br><span class="line">        bingo == <span class="literal">True</span></span><br></pre></td></tr></table></figure>

<blockquote>
<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ol>
<li>第一个字符必须是字母或者下划线_</li>
<li>剩下的部分可以是字母、下划线_或数字0~9</li>
<li>变量名称是对大小写敏感的，myname 和 myName 不是同一个变量。<h3 id="逻辑判断"><a href="#逻辑判断" class="headerlink" title="逻辑判断"></a>逻辑判断</h3></li>
</ol>
</blockquote>
<hr>
<p>bool类型：True 或者 False</p>
<table>
<thead>
<tr>
<th>not</th>
<th>逻辑“非”</th>
<th>如果 x 为 True，则 not x 为 False</th>
</tr>
</thead>
<tbody><tr>
<td>and</td>
<td>逻辑“与”</td>
<td>如果 x 为 True，且 y 为 True，则 x and y 为 True</td>
</tr>
<tr>
<td>or</td>
<td>逻辑“或”</td>
<td>如果x,y中至少有一个为True，则x or y 为True</td>
</tr>
</tbody></table>
<blockquote>
<h3 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h3></blockquote>
<hr>
<p><code>range(1,101)</code>才是从1到100，表示从1开始到101终止，不包括101，与randint不同<br>输出从1到100</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">101</span>)</span><br><span class="line">    print( i )</span><br></pre></td></tr></table></figure>

<blockquote>
<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3></blockquote>
<hr>
<p> \ 被称作转译字符，除了用来表示引号，还有比如用<br>    1.  \n 表示字符串中的换行（相当于按一下回车键的效果）<br>    2.  \t 表示字符串中的制表符（相当于按一下tab键的效果）<br>    3.  \ 表示字符串中的 \ （因为单个斜杠被用来做转义了，所以真的要表示 \ 字符，就要两个斜杠）<br>\ 还有个用处，就是用来在代码中换行，而不影响输出的结果：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">this <span class="keyword">is</span> the \</span><br><span class="line">same line</span><br></pre></td></tr></table></figure>

<p>三引号表示字符串</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">"what's your name?"</span></span><br><span class="line"><span class="string">"I am dashabi"</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<blockquote>
<h3 id="字符串格式化"><a href="#字符串格式化" class="headerlink" title="字符串格式化"></a>字符串格式化</h3></blockquote>
<hr>
<p>字符串连起来输出可以用<code>+</code>号连接</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> (str1 + str2)</span><br></pre></td></tr></table></figure>

<p>如果把一个数字加到文字后面输出，不可以直接用加号</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> ( <span class="string">'my age is '</span> + str(<span class="number">18</span>) )</span><br></pre></td></tr></table></figure>

<p>或者用%对字符串进行<strong>格式化</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">18</span></span><br><span class="line">print(<span class="string">'My name is %d'</span> % num)</span><br></pre></td></tr></table></figure>

<p><strong>%d</strong>只能用来替换整数，对于浮点型，需要使用%f，保留两位小数则用 <strong>%.2f</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> (<span class="string">'price is %f'</span> % <span class="number">4.99</span>)</span><br></pre></td></tr></table></figure>

<p>用 <strong>%s</strong>来替换一段字符串<br>当需要多个字符串进行格式化的时候，只要在前面用对应的%替代，并在后面按顺序排列就可以了</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">'Lily'</span></span><br><span class="line">score = <span class="number">95</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">"%s 's score is %d"</span>  %  (name, score))</span><br></pre></td></tr></table></figure>

<blockquote>
<h3 id="循环的嵌套"><a href="#循环的嵌套" class="headerlink" title="循环的嵌套"></a>循环的嵌套</h3></blockquote>
<hr>
<p>如果想要程序输出这样的文本</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*</span><br><span class="line">**</span><br><span class="line">***</span><br><span class="line">****</span><br><span class="line">*****</span><br></pre></td></tr></table></figure>

<p>可以使用循环嵌套，根据外层循环的序数，设置内层循环应当执行的次数。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">5</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, i+<span class="number">1</span>):</span><br><span class="line">        print(<span class="string">'*'</span>, end = <span class="string">''</span>)</span><br><span class="line">    print()</span><br></pre></td></tr></table></figure>

<blockquote>
<h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3></blockquote>
<hr>
<ul>
<li>int(x)     #把x转换成整数</li>
<li>float(x)  #把x转换成浮点数</li>
<li>str(x)     #把x转换成字符串</li>
<li>bool(x)   #把x转换成bool值<br>bool类型的转换和其他的有所不同：<ul>
<li><strong>为0的数字</strong>，包括0， 0.0</li>
<li><strong>空字符串</strong>， 包括‘’，“”“”</li>
<li>表示空值的<strong>None</strong></li>
<li><strong>空集合</strong>， 包括（），[], {}<br>以上这些值会被认为是False，其他的值都认为是True.</li>
</ul>
</li>
</ul>
<p><strong>None</strong> 是 python 中的一个特殊值，表示什么都没有，它和 0、空字符、False、空集合 都不一样。</p>
<p>在 if、while 等条件判断语句里，判断条件会自动进行一次bool的转换</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">'123'</span></span><br><span class="line"><span class="keyword">if</span> a :</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'this is not a blank string'</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3></blockquote>
<hr>
<p>如果我们要自己写一个函数，就需要去 定义 它。python里的关键字叫 def（define的缩写），格式如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sayHello</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"hello world!"</span>)</span><br><span class="line">    </span><br><span class="line">sayHello() <span class="comment">#进行函数的调用</span></span><br></pre></td></tr></table></figure>

<blockquote>
<h3 id="函数应用实例"><a href="#函数应用实例" class="headerlink" title="函数应用实例"></a>函数应用实例</h3></blockquote>
<hr>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isEqual</span><span class="params">(num1,num2)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> num1&lt;num2:</span><br><span class="line">        print(<span class="string">"too small"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> num1&gt; num2:</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"too big"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> num1 == num2:</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"bingo!"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">num = randint(<span class="number">1</span>, <span class="number">100</span>) </span><br><span class="line">print(<span class="string">'Guess what I think?'</span>) </span><br><span class="line">bingo = <span class="literal">False</span> </span><br><span class="line"><span class="keyword">while</span> bingo == <span class="literal">False</span>: </span><br><span class="line">    answer = int(input()) </span><br><span class="line">    bingo = isEqual(answer, num)</span><br></pre></td></tr></table></figure>

<p><strong>return</strong> 是函数的结束语句，<strong>return</strong> 后面的值被作为这个函数的返回值。函数中任何地方的 return 被执行到的时候，这个函数就会立刻结束并跳出。<br><strong>注意</strong>：函数的 返回值 和我们前面说的 输出是两回事。<strong>print</strong> 输出是将结果显示在控制台中，最终一定是转成字符类型；而 返回值，是将结果返回到调用函数的地方，可以是任何类型。</p>
<blockquote>
<h3 id="if-elif-else"><a href="#if-elif-else" class="headerlink" title="if, elif, else"></a>if, elif, else</h3></blockquote>
<hr>
<p><img src="en-resource://database/812:1" alt="280d5bf247827b84388cd5aa608d1cd8.png"></p>
<p>if, elif, else 可组成一个整体的条件语句。</p>
<ol>
<li>if 是必须有的；</li>
<li>elif 可以没有，也可以有很多个，每个elif条件不满足时会进入下一个elif判断；一旦满足，执行完就结束整个条件语句；</li>
<li>else 可以没有，如果有的话只能有一个，必须在条件语句的最后。<blockquote>
<h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3></blockquote>
</li>
</ol>
<hr>
<p><strong>list</strong>格式就是用 <strong>中括号[]</strong> 包围、<strong>逗号</strong>隔开的一组数值</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br></pre></td></tr></table></figure>

<p>列表中的元素可以是数值，字符，也可以是多种类型的混合<br>访问列表中的元素时，下标是从0开始。不能访问一个不存在的元素，程序会报错，提示你index越界了</p>
<ol>
<li><p><strong>修改list中的某一个元素</strong>，只需要直接给那个元素直接赋值就可以了：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">l[<span class="number">0</span>] = <span class="number">123</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>向list中添加元素</strong>：list中有一个append方法，可以增加元素。以l这个列表为例，调用的方法是：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">l.append(<span class="number">1024</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>删除list中的元素，要用到del:</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">del</span> l[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>将<strong>list</strong>应用在点球小游戏中：<br>每一轮，你先输入一个方向射门，然后电脑随机判断一个方向扑救。<br>方向不同则算进球得分，方向相同算扑救成功，不得分。<br>之后攻守轮换，你选择一个方向扑救，电脑随机方向射门。<br>第5轮结束之后，如果得分不同，比赛结束。<br>5轮之内，如果一方即使踢进剩下所有球，也无法达到另一方当前得分，比赛结束。<br>5轮之后平分，比赛继续进行，直到某一轮分出胜负。</p>
<p>random中的另一个方法<code>choice</code>，他的作用是从一个list中随机挑选一个元素。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> choice</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"Choose one side to shoot: "</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"left, center, rigth"</span>)</span><br><span class="line">you = input()</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"You kiced"</span> + you)</span><br><span class="line">direction = [<span class="string">'left'</span>, <span class="string">'center'</span>, <span class="string">'right'</span>]</span><br><span class="line">com = choice(direction)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'Computer saved '</span>+ com)</span><br><span class="line"><span class="keyword">if</span> you != com :</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'Goal!'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'Oops...'</span>)</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>list有两类常用操作： <strong>索引（index）</strong> 和 <strong>切片（slice）</strong><br>l[-1]表示l中的最后一个元素。l[-3]表示倒数第3个元素。</li>
</ol>
<p><strong>切片操作符是在[]</strong> 内提供一对可选数字，用:分割。冒号前的数表示切片的开始位置，冒号后的数字表示切片到哪里结束。同样，计数从0开始。<br><strong>注意：开始位置包含在切片中，而结束位置不包括。</strong><br>如果不指定第一个数，切片就从列表第一个元素开始。<br>如果不指定第二个数，就一直到最后一个元素结束。<br>都不指定，则返回整个列表。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">l[:<span class="number">3</span>]</span><br><span class="line">l[<span class="number">1</span>:]</span><br><span class="line">l[:]</span><br></pre></td></tr></table></figure>

<p>同索引一样，切片中的数字也可以使用负数。比如：l[1:-1]</p>
<hr>
<p>点球游戏！！！</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> choice</span><br><span class="line"></span><br><span class="line">score = [<span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">direction = [<span class="string">'left'</span>, <span class="string">'center'</span>, <span class="string">'right'</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">kick</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'==== You Kick! ===='</span> % (i+<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'Choose one side to shoot:'</span>)</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'left, center, right'</span>)</span><br><span class="line">    you = input()</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'You kicked'</span> + you)</span><br><span class="line">    com = choice(direction)</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'Computer saved'</span> + com)</span><br><span class="line">    <span class="keyword">if</span> yon != com:</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">'Goal!'</span>)</span><br><span class="line">        score[<span class="number">0</span>] += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">'Oops....'</span>)</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'Score: %d(you) - %d(com)'</span> % (score[<span class="number">0</span>], score[<span class="number">1</span>]))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'==== You Save! ===='</span> % (i+<span class="number">1</span>)) </span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'Choose one side to save:'</span>) </span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'left, center, right'</span>) </span><br><span class="line">    you = input() </span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'You saved '</span> + you) </span><br><span class="line">    com = choice(direction) </span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'Computer kicked '</span> + com) </span><br><span class="line">    <span class="keyword">if</span> you == com: </span><br><span class="line">        <span class="keyword">print</span> (<span class="string">'Saved!'</span>) </span><br><span class="line">    <span class="keyword">else</span>: </span><br><span class="line">        <span class="keyword">print</span> (<span class="string">'Oops...'</span>) </span><br><span class="line">        score[<span class="number">1</span>] += <span class="number">1</span> </span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'Score: %d(you) - %d(com)\n'</span> % (score[<span class="number">0</span>], score[<span class="number">1</span>]))  </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>): <span class="comment">#range(5) 等同于range(0,5)</span></span><br><span class="line">    print(<span class="string">'==== Round %d ===='</span> % (i + <span class="number">1</span>)) </span><br><span class="line">    kick()</span><br><span class="line"><span class="keyword">while</span> (score [<span class="number">0</span>] == score[<span class="number">1</span>]):</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'==== Round %d ===='</span> % (i+<span class="number">1</span>))</span><br><span class="line">    kick()</span><br><span class="line"><span class="keyword">if</span> score[<span class="number">0</span>] &gt; score[<span class="number">1</span>]: </span><br><span class="line">    print(<span class="string">'You Win!'</span>) </span><br><span class="line"><span class="keyword">else</span>: </span><br><span class="line">    print(<span class="string">'You Lose.'</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<h3 id="处理文件数据"><a href="#处理文件数据" class="headerlink" title="处理文件数据"></a>处理文件数据</h3></blockquote>
<hr>
<p><em>文件 scores.txt</em></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">刘备 23 35 44 47 51</span><br><span class="line">关羽 60 77 68</span><br><span class="line">张飞 97 99 89 91</span><br><span class="line">诸葛亮 100</span><br></pre></td></tr></table></figure>

<p>注意：为了减少麻烦，请保证文件中没有多余的空行。另外，因为windows系统默认会隐藏文件类型，所以请确保你创建的文件名正确，不要多加了后缀，误存为 scores.txt.txt</p>
<p>1.先把文件读进来，在这里，由于有中文字符，因此需要对字符进行编码，以免出现报错。</p>
<p>在 windows 中，如果用记事本打开，并且将这些文字一个个手动输入，默认中文编码为 gbk，因此需要：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f = open(<span class="string">'scores.txt'</span>, encoding=<span class="string">'gbk'</span>)</span><br></pre></td></tr></table></figure>

<p>题外话：我并不建议在学习编程时使用windows默认的记事本，它会在文字编码上给你带来很多不必要的麻烦。推荐使用可以方便控制编码的notepad++或sublime text。</p>
<p>而如果是 Mac 或 Linux 系统，或者直接复制了我的文本（浏览器的中文编码多使用 utf-8），则使用了 utf-8 编码，因此需要：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f = open(<span class="string">'scores.txt'</span>, encoding=<span class="string">'utf-8'</span>)</span><br></pre></td></tr></table></figure>

<p>这只是很粗略的总结，编码的问题一直都是编程的一大难题，如果出现报错，就换一种编码再试试。我们之后的教程都是在 windows 系统中的，所以使用 gbk 编码（但不排除你的系统可能是 utf8）。</p>
<p>2.取得文件中的数据。因为每一行都是一条学生成绩的记录，所以用<strong>readlines</strong>，把每一行分开，便于之后的数据处理：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lines = f.readlines()</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure>

<p>提示：在程序中，经常使用print来查看数据的中间状态，可以便于你理解程序的运行。比如这里你可以print (lines)，看一下内容被存成了什么格式。</p>
<p>3.对每一条数据进行处理。按照空格，把姓名、每次的成绩分割开：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">   data = line.split()</span><br></pre></td></tr></table></figure>

<p>这里用到之前 <a href="https://python666.cn/cls/lesson/29/" target="_blank" rel="noopener">28.字符串的分割</a> 课程中介绍过的 <strong>split</strong> 方法。</p>
<p>接下来的4、5两个步骤都是针对一条数据的处理，所以都是在<strong>for循环</strong>的内部。</p>
<p> 4.整个程序最核心的部分到了。如何把一个学生的几次成绩合并，并保存起来呢？我的做法是：对于每一条数据，都新建一个字符串，把学生的名字和算好的总成绩保存进去。最后再把这些字符串一起保存到文件中：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sum = <span class="number">0</span></span><br><span class="line">score_list = data[<span class="number">1</span>:]  <span class="comment"># 学生各门课的成绩列表</span></span><br><span class="line"><span class="keyword">for</span> score <span class="keyword">in</span> score_list:</span><br><span class="line">   sum += int(score)</span><br><span class="line">result = <span class="string">'%s\t: %d\n'</span> % (data[<span class="number">0</span>], sum)  <span class="comment"># 名字和总分</span></span><br></pre></td></tr></table></figure>

<p>这里几个要注意的点：</p>
<ol>
<li>对于每一行分割的数据，<strong>data[0]</strong>是姓名，<strong>data[1:]</strong>是所有成绩组成的列表。</li>
<li><strong>每次循环中，sum都要先清零</strong>。</li>
<li>score是一个字符串，为了做计算，需要转成整数值int。</li>
<li>result中，我加了一个制表符\t和换行符\n，让输出的结果更好看些。</li>
</ol>
<p>5.得到一个学生的总成绩后，把它添加到一个list中。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">results.append(result)</span><br></pre></td></tr></table></figure>

<p> results需要在循环之前<strong>初始化</strong> results = []</p>
<p>6.最后，全部成绩处理完毕后，把results中的内容保存至文件。因为results是一个字符串组成的list，这里我们直接用writelines方法：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">output = open(<span class="string">'result.txt'</span>, <span class="string">'w'</span>, encoding=<span class="string">'gbk'</span>)</span><br><span class="line">output.writelines(results)</span><br><span class="line">outpus.close()</span><br></pre></td></tr></table></figure>

<blockquote>
<h3 id="break"><a href="#break" class="headerlink" title="break"></a>break</h3></blockquote>
<hr>
<p>如果在循环条件仍然满足或序列没有遍历完的时候，想要强行跳出循环，就需要用到break</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">	a = input()</span><br><span class="line">	<span class="keyword">if</span> a == <span class="string">'EOF'</span>:</span><br><span class="line">		<span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<blockquote>
<h3 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h3></blockquote>
<hr>
<p>break 是彻底跳出循环，而continue是略过本次循环进入下一次的循环</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> score <span class="keyword">in</span> data[<span class="number">1</span>:]:</span><br><span class="line">	point = int(score)</span><br><span class="line">	<span class="keyword">if</span> point &lt; <span class="number">60</span>:</span><br><span class="line">		<span class="keyword">continue</span></span><br><span class="line">	sum += point</span><br></pre></td></tr></table></figure>

<p>无论是break，还是continue，想改变的都是当前所处的最内层的循环运行，如果还有外层循环，并不会因此略过或者跳出</p>
<blockquote>
<h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3></blockquote>
<hr>
<p>在python中，可以使用try…except语句来处理异常。做法是，把可能引发异常的语句放在try-块中，把处理异常的语句放在except-块中。</p>
<p> 把刚才那段代码放入try…except中：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">   f = open(<span class="string">'non-exist.txt'</span>)</span><br><span class="line">   <span class="keyword">print</span> (<span class="string">'File opened!'</span>)</span><br><span class="line">   f.close()</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">   <span class="keyword">print</span> (<span class="string">'File not exists.'</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'Done'</span>)</span><br></pre></td></tr></table></figure>

<p> 当程序在try内部打开文件引发异常时，会跳过try中剩下的代码，直接跳转到except中的语句处理异常。于是输出了“File not exists.”。如果文件被顺利打开，则会输出“File opened!”，而不会去执行except中的语句。</p>
<p> 但无论如何，整个程序不会中断，最后的“Done”都会被输出。</p>
<blockquote>
<h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3></blockquote>
<hr>
<p>字典是一个键/值对的集合</p>
<p>基本格式是（key是键, value是值）</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;key1:value1,key2:value2&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>键必须是唯一的；</li>
<li>键只能是简单对象，比如字符串、整数、浮点数、bool值。</li>
</ol>
<p>list不能作为键，但是可以在作为值</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">score = &#123;</span><br><span class="line">	<span class="string">'萧峰'</span>: <span class="number">95</span>,</span><br><span class="line">	<span class="string">'段誉'</span>: <span class="number">97</span>,</span><br><span class="line">	<span class="string">'虚竹'</span>: <span class="number">89</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>字典中键/值没有顺序，不能使用索引来访问值，只能通过相应的键来访问</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(score[<span class="string">'段誉'</span>])</span><br></pre></td></tr></table></figure>

<p>如果键是字符串，通过键访问需要加引号，如果是数值就不用</p>
<p>如果提供的键再字典中不存在，就回报错</p>
<p>另一种访问字典中元素的方法</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">score.get(<span class="string">'慕容复'</span>)</span><br></pre></td></tr></table></figure>

<p>这种方法的好处是，如果键不存在也不会报错，只会返回None</p>
<p>字典可以通过for…in来遍历：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> score:</span><br><span class="line">	print(score[name])</span><br></pre></td></tr></table></figure>

<p>遍历的变量中存储的字典的键。</p>
<p>如果要改变某一线搞得值，就直接给这一项赋值：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">score[<span class="string">'虚竹'</span>] = <span class="number">91</span></span><br></pre></td></tr></table></figure>

<p>增加一项字典项的方法是，直接给一个新键赋值：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">score[<span class="string">'慕容复'</span>] = <span class="number">88</span></span><br></pre></td></tr></table></figure>

<p>删除一个字典项：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">del</span> score[<span class="string">'萧峰'</span>]</span><br></pre></td></tr></table></figure>

<p>新键空的字典：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3></blockquote>
<hr>
<p>想知道模块了有哪些函数和变量，可以用dir()方法：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dir(module)</span><br></pre></td></tr></table></figure>

<p>如果只是用到模块中某一个函数或变量，也可通过from…import…指明：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> math <span class="keyword">import</span> pi</span><br><span class="line"><span class="keyword">print</span> (pi)</span><br></pre></td></tr></table></figure>

<p>为了便于理解和避免冲突，还可以给引入的方法换个名字：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> pi <span class="keyword">as</span> math_pi</span><br><span class="line"><span class="keyword">print</span> (math_pi)</span><br></pre></td></tr></table></figure>

<blockquote>
<h3 id="用文件保存游戏"><a href="#用文件保存游戏" class="headerlink" title="用文件保存游戏"></a>用文件保存游戏</h3></blockquote>
<hr>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"></span><br><span class="line">name = input(<span class="string">'请输入你的名字：'</span>) <span class="comment"># 输入玩家名字</span></span><br><span class="line"></span><br><span class="line">f = open(<span class="string">'game2.txt'</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">lines = f.readlines()</span><br><span class="line">f.close()</span><br><span class="line">scores = &#123;&#125; <span class="comment"># 初始化一个字典</span></span><br><span class="line"><span class="keyword">for</span> l <span class="keyword">in</span> lines:</span><br><span class="line">    s = l.split() <span class="comment"># 把每一行的数据拆成list</span></span><br><span class="line">    score[s[<span class="number">0</span>]] = s[<span class="number">1</span>:] <span class="comment"># 第一项作为key，剩下的作为value</span></span><br><span class="line">score = score.get(name)</span><br><span class="line"><span class="keyword">if</span> score <span class="keyword">is</span> <span class="literal">None</span>: <span class="comment"># 如果没有找到</span></span><br><span class="line">    score = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">game_times = int(core[<span class="number">0</span>])</span><br><span class="line">min_times = int(core[<span class="number">1</span>])</span><br><span class="line">total_times = int(core[<span class="number">2</span>])</span><br><span class="line"><span class="keyword">if</span> game_time &gt; <span class="number">0</span>:</span><br><span class="line">    avg_times = total_time/game_times</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    avg_times = <span class="number">0</span></span><br><span class="line">print(<span class="string">'%s,你已经玩了%d次，最少%d轮猜出答案，平均%.2f轮猜出答案'</span> %(name, game_times, min_times, avg_times))</span><br><span class="line"></span><br><span class="line">num = radint(<span class="number">1</span>,<span class="number">100</span>)</span><br><span class="line">times = <span class="number">0</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">'Guess what I think'</span>)</span><br><span class="line">bingo = <span class="literal">False</span></span><br><span class="line"><span class="keyword">while</span> bingo == <span class="literal">False</span>:</span><br><span class="line">    times </span><br><span class="line">    time += <span class="number">1</span></span><br><span class="line">    answer = int(input())</span><br><span class="line">    <span class="keyword">if</span> answer&lt;num:</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">'too small'</span>)</span><br><span class="line">    <span class="keyword">if</span> answer &gt; num:</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">'too big!'</span>)</span><br><span class="line">    <span class="keyword">if</span> answer == num:</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">'BINGO'</span>)</span><br><span class="line">        bingo = <span class="literal">True</span></span><br><span class="line"><span class="keyword">if</span> game_times == <span class="number">0</span> <span class="keyword">or</span> times&lt; min_times:</span><br><span class="line">    min_times = times</span><br><span class="line">total_times += times</span><br><span class="line">game_times += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把成绩更新到对应的玩家数据中</span></span><br><span class="line"><span class="comment"># 加str转换成字符串，为后面的格式做准备</span></span><br><span class="line">score[name] = [str(game_times), str(min_times), str(total_times)]</span><br><span class="line">result = <span class="string">''</span> <span class="comment"># 初始化一个空字符串，用来储存数据</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> scores:</span><br><span class="line">    line = n + <span class="string">''</span> + <span class="string">''</span>.join(score[n]) + <span class="string">'\n'</span></span><br><span class="line">    result += line <span class="comment"># 添加到result中</span></span><br><span class="line">f = open(<span class="string">'game2.txt'</span>, <span class="string">'w'</span>, encoding = <span class="string">'utf-8'</span>)</span><br><span class="line">f.write(result)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure>

]]></content>
      
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[服务器管理与升级中遇到的问题]]></title>
      <url>/servernote.html</url>
      <content type="html"><![CDATA[<ul>
<li><p>服务器升级R后Bioconductor的版本可能会导致不同，需要安装BioManager之后；运行</p>
  <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Bioconductor::install(version = <span class="string">"3.9"</span>)</span><br></pre></td></tr></table></figure>

<p>  对应Bioconductor 3.9版本</p>
</li>
<li><p>服务器升级问题</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://apt.sw.be/redhat/el6/en/x86_64/dag/repodata/repomd.xml: [Errno 14] PYCURL ERROR 6 - <span class="string">"Couldn‘t resolve host ‘apt.sw.be‘"</span></span><br></pre></td></tr></table></figure>

<p>  1.<code>cd /etc/yum.repos.d</code> 进入这个目录，里面有个文件dag.repo 文件(可能名称会不一样)里面的 <code>baseurl=http://apt.sw.be/redhat/el$releasever/en/$basearch/dag</code><br>  2.<code>vi</code> 编译一下里面的地址baseurl, 把后面的地址更换 我索性网上找到了有一篇文章<a href="https://blog.csdn.net/zhujiangm/article/details/42614105" target="_blank" rel="noopener">https://blog.csdn.net/zhujiangm/article/details/42614105</a>有很多个地址，然后就替换进去，不怕地址都用不了。</p>
  <a id="more"></a> 

  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> [dag]</span><br><span class="line"> name=Dag RPM Repository <span class="keyword">for</span> Red Hat Enterprise Linux</span><br><span class="line"> baseurl = http://archive.cs.uu.nl/mirror/dag.wieers/redhat/el<span class="variable">$releasever</span>/en/<span class="variable">$basearch</span>/dag</span><br><span class="line">    http://apt.sw.be/redhat/el<span class="variable">$releasever</span>/en/<span class="variable">$basearch</span>/dag</span><br><span class="line"> http://dag.linux.iastate.edu/dag/redhat/el<span class="variable">$releasever</span>/en/<span class="variable">$basearch</span>/dag</span><br><span class="line">    http://ftp.riken.jp/Linux/dag/redhat/el<span class="variable">$releasever</span>/en/<span class="variable">$basearch</span>/dag/</span><br><span class="line">    http://ftp2.lcpe.uni-sofia.bg/freshrpms/pub/dag/redhat/el<span class="variable">$releasever</span>/en/<span class="variable">$basearch</span>/dag</span><br><span class="line">    http://ftp.heanet.ie/pub/freshrpms/pub/dag/redhat/el<span class="variable">$releasever</span>/en/<span class="variable">$basearch</span>/dag</span><br><span class="line">    http://ftp-stud.fht-esslingen.de/dag/redhat/el<span class="variable">$releasever</span>/en/<span class="variable">$basearch</span>/dag</span><br><span class="line">    http://mirror.cpsc.ucalgary.ca/mirror/dag/redhat/el<span class="variable">$releasever</span>/en/<span class="variable">$basearch</span>/dag</span><br><span class="line">    http://mirrors.ircam.fr/pub/dag/redhat/el<span class="variable">$releasever</span>/en/<span class="variable">$basearch</span>/dag</span><br><span class="line">    http://rh-mirror.linux.iastate.edu/pub/dag/redhat/el<span class="variable">$releasever</span>/en/<span class="variable">$basearch</span>/dag</span><br><span class="line">   http://rpmfind.net/linux/dag/redhat/el<span class="variable">$releasever</span>/en/<span class="variable">$basearch</span>/dag</span><br><span class="line">   http://wftp.tu-chemnitz.de/pub/linux/dag/redhat/el<span class="variable">$releasever</span>/en/<span class="variable">$basearch</span>/dag</span><br><span class="line">   http://www.mirrorservice.org/sites/apt.sw.be/redhat/el<span class="variable">$releasever</span>/en/<span class="variable">$basearch</span>/dag</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=http://dag.wieers.com/rpm/packages/RPM-GPG-KEY.dag.txt</span><br></pre></td></tr></table></figure>


</li>
</ul>
<ul>
<li><p>服务器升级   <code>Error: Package: libgpod-0.8.3-7.el7.x86_64 (@epel)</code><br>解决办法： 先运行<code>yum downgrade libgpod</code> 然后报错就可以解决了</p>
</li>
<li><p>kill掉一个用户的所有进程</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">killall –u username</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> linux </tag>
            
            <tag> server </tag>
            
            <tag> update </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[awk使用笔记]]></title>
      <url>/awk%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0.html</url>
      <content type="html"><![CDATA[<ul>
<li><p>使用<code>awk</code>为文件每一行添加Sample名字</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk -F <span class="string">'\t'</span> <span class="string">'&#123;print $0, SampleID&#125;'</span> 操作文件</span><br></pre></td></tr></table></figure>
</li>
<li><p>如何使用awk 调用Shell变量<br>变量跳过文件首行，输出文件的每一行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `cat name.txt`; <span class="keyword">do</span> awk -F <span class="string">'\t'</span> <span class="string">'NR&gt;1&#123;print $0,  "\t'</span><span class="variable">$i</span><span class="string">'"&#125;'</span> <span class="variable">$i</span>.hg38_multianno.txt &gt; <span class="variable">$i</span>.new.txt; <span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<p>Shell变量在awk中使用要用单引号将变量隔离开</p>
</li>
<li><p>awk中if的使用方法</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk -F <span class="string">'\t'</span> <span class="string">'&#123;if($2 &gt; 0) print $1&#125;'</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<a id="more"></a>

<ul>
<li><p>awk提取bam文件CIGAR中match碱基数量大于一定值</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">samtools view W24D.sort.bam |less -S|awk <span class="string">'$6~/[7-9][0-9]&#123;1,&#125;M|1[0-9][0-9]M/ &#123;print&#125;'</span>|less -S</span><br></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> awk </tag>
            
            <tag> linux </tag>
            
            <tag> bioinformatics </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[生信分析日常笔记]]></title>
      <url>/%E7%94%9F%E4%BF%A1%E5%88%86%E6%9E%90%E6%97%A5%E5%B8%B8.html</url>
      <content type="html"><![CDATA[<ul>
<li><p>Annovar注释优先级：需要注意的是，如果该变异找到多种注释，ANNOVAR将会对它进行比较，以exonic = splicing &gt; ncRNA &gt; UTR5/UTR3 &gt; intron &gt; upstream/downstream &gt; intergenic 的优先权重，取最优的表示，如果你想ANNOVAR列出该变异所有注释，可以使用–separate参数</p>
</li>
<li><p>MuTect2默认参数设置很严格，<code>max_alt_alleles_in_normal_count</code> 默认为1，也就是白细胞里只要发现1个变异，MuTect2就会认为该变异不属于somatic变异，并将其扔掉，试想10000层的深度，那还不全扔掉啊！这里推荐<code>max_alt_alleles_in_normal_count</code>参数设置为1000。同理，<code>max_alt_allele_in_normal_fraction</code>默认为0.03，建议改为0.1，这样就能保证即使1000起不到作用的时候（比如测序深度&lt;1000层），也可以通过0.1过滤。</p>
<a id="more"></a>
</li>
<li><p>Soft Clip，是指虽然比对不到基因组，但是还是存在于SEQ (segment SEQuence)中的序列，此时CIGAR列对应的S(Soft)的符号。直白点说，就是虽然比对不上参考基因组，但是在BAM/SAM文件中的reads上还是存在的序列（并没有被截断扔掉的序列）。  </p>
</li>
<li><p>Hard Clip，同样的，就表示比对不上并且不会存在于SAM/BAM文件中的序列（被截断扔掉了的序列，此时CIGAR列会留下H(Hard)的符号，但是序列的那一列却没有对应的序列了）。</p>
</li>
<li><h4 id="为什么会产生Clip"><a href="#为什么会产生Clip" class="headerlink" title="为什么会产生Clip"></a><strong>为什么会产生Clip</strong></h4><p>知道了Clip的含义，再先理解一下Soft Clip，即只要一条序列上，两端有比对不上的序列部分，就是Soft Clip，这个一条序列上有比对不上的部分的现象是必然存在的（比如结构变异的断点的部分），这种两端比对不上的read的特殊的表示方法，就是Soft Clip。Soft Clip是可以独立存在的。<br>而Hard Clip，相对来说更特殊一点，是依赖于Soft Clip存在的。也就是有Soft Clip不一定有Hard Clip，而有Hard Clip则一定有Soft Clip。Hard Clip存在的本意，是减少BAM文件序列的冗余度，比如有一条read，它能比对到A，B两个地方，在A地方，是60M90S，在B地方是60H90M，此时一条read其实已经在A位置有了完整的序列信息，在B位置的信息其实是冗余的，所以在B位置可以引入Hard Clip这样一个标记形式，就能把B位置的序列标记为secondary。</p>
</li>
<li><p>提取bam/sam文件指定区域reads</p>
<p>首先准备一个区域信息文件。region.bed #第一列为染色体ID，第二三列分别为起始终止位置 </p>
<p>​              例： 12  21100  41200  #取12号染色体21100-41200区间的序列</p>
</li>
</ul>
<p>  之后如果是sam文件,先转成bam文件：</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">samtools view -Sb  reads.sam &gt;  reads.bam</span><br></pre></td></tr></table></figure>

<p>  然后就可以使用bedtools来提取reads啦，命令如下：</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bedtools  intersect  -a  reads.bam -b  region.bed &gt; target_reads.bam</span><br></pre></td></tr></table></figure>

<ul>
<li><p>如何将多个病人的maf文件合成一个：</p>
<p>先生成maf首行，然后append</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat *.maf | egrep <span class="string">"^#|^Hugo_Symbol"</span> | head -2 &gt; allsamples.vep.maf</span><br><span class="line">cat *.maf | egrep -v <span class="string">"^#|^Hugo_Symbol"</span> &gt;&gt; allsamples.vep.maf</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>用R在run大数据的时候要经常使用gc()，清除中间变量占用的大量内存，否则内存会不够用。单纯的使用<code>rm()</code>是不能释放变量占用的内存的。</p>
</li>
<li><p>PyClone的分析结果可以无缝连接CITUP</p>
<p>运行run_citup_qip.sh freq.txt cluster.txt results.h5 –submit local</p>
<p>输出结果是一个HDF格式的h5文件：results.h5</p>
<p> 这是一个基于键引用的树型结构，可以用Python的h5py包读取处理数据还需要numpy和pandas</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hf=h5py.File(results.h5,<span class="string">'r'</span>)</span><br></pre></td></tr></table></figure>

<p>用hf.keys()命令我们可以看到有两个键results和trees，这两个键下面又包含很多键</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">opnum=hf[<span class="string">"results/optimal/index"</span>][<span class="number">0</span>]</span><br></pre></td></tr></table></figure>

<p>获取此树的节点克隆频率</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cellfreq=hf[<span class="string">"trees/"</span> + str(opnum) + <span class="string">"/clone_freq/block0_values"</span>][:]</span><br></pre></td></tr></table></figure>

<p>获取此树的分支进化：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tree=hf[<span class="string">"trees/"</span> + str(opnum) + <span class="string">"/adjacency_list/block0_values"</span>][:]</span><br></pre></td></tr></table></figure>

<p>将这两个文件整理成TimeScape的输入文件</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">timescape(clonal_prev = clonal_prev,tree_edges = tree_edges,mutations = <span class="string">"NA"</span>,clone_colours = <span class="string">"NA"</span>,perturbations = <span class="string">"NA"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>How to run MutSigCV</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/Software/MutSigCV_MCR/run_MutSigCV.sh /usr/local/MATLAB/MATLAB_Compiler_Runtime/v81 allsamples.vep.maf ~/Software/Ref_DriverGene/exome_full192.coverage.txt ~/Software/Ref_DriverGene/gene.covariates.txt my_results ~/Software/Ref_DriverGene/mutation_type_dictionary_file.txt ~/Software/Ref_DriverGene/chr_files_hg38</span><br></pre></td></tr></table></figure>
</li>
<li><p>How to get ANNOVAR input file</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for i in *.new ;do awk -F '\t' '&#123;print$1"\t"$2"\t"$2"\t"$4"\t"$5&#125;' $i &gt; $i".annotate";done</span><br></pre></td></tr></table></figure>
</li>
<li><p>替换R中的NA缺失值为空格</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dt[is.na(dt)] &lt;- <span class="number">0</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>How to run CNVkit</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnvkit.py batch C10A.sort.bam -n ~/Normalsample_data/Rawdata/48gene/OUT/filterbampath/C*.sort.bam -m amplicon -t ~/48genepanel.bed  -f ~/hg38/hg38.chrom.fa --output-reference my_reference.cnn --output-dir ../cnvkit/</span><br></pre></td></tr></table></figure>

<p>下一次再运行的时候就不再需要<code>--output-reference</code>参数，只用使用<code>-r</code>后面接my_reference.cnn</p>
<p>这一步的结果可以产生cnr和cns文件，利用这两个文件可以进行拷贝数整体情况的画图</p>
<p>输出seg文件，使用PureCN对肿瘤纯度进行估计</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnvkit.py export seg -o C10A.sort.seg C10A.sort.cns</span><br></pre></td></tr></table></figure>

<p>安装PureCN</p>
<p><code>PureCN</code> 是 <code>Bioconductor</code> 包，安装方法很简单，打开R输入以下命令。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1if (!requireNamespace(&quot;BiocManager&quot;, quietly = TRUE))2    install.packages(&quot;BiocManager&quot;)34BiocManager::install(&quot;PureCN&quot;)</span><br></pre></td></tr></table></figure>

<p><code>PureCN</code> 命令行依赖于 <code>optparse</code> </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1install.packages(&quot;optparse&quot;)</span><br></pre></td></tr></table></figure>

<p>安装完成后，为了方便使用，配置一个 <code>$PURECN</code> 环境变量。打开 <code>R</code> 输入下面命令能获得一个地址。</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">system.file(<span class="string">"extdata"</span>, package=<span class="string">"PureCN"</span>)<span class="number">2</span>[<span class="number">1</span>] <span class="string">"/usr/local/lib64/R/library/PureCN/extdata"</span></span><br></pre></td></tr></table></figure>

<p> 然后将该地址设为环境变量 <code>$PURECN</code></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PURECN="/usr/local/lib64/R/library/PureCN/extdata"</span><br></pre></td></tr></table></figure>

<p> 需要永久保存则将 <code>export</code> 语句写入 <code>~/.bashrc</code> 文件。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Rscript $PURECN/PureCN.R \</span><br><span class="line">	--sampleid ID \</span><br><span class="line">	--out output_dir \</span><br><span class="line">	--tumor example.cnr \</span><br><span class="line">	--segfile example.seg \</span><br><span class="line">	--genome hg38</span><br></pre></td></tr></table></figure>

<p>将估计出的可信度最高的肿瘤purity，使用cnvkit call</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnvkit.py call C10A.sort.cns -y -m clonal --purity 0.37 -o C10A.sort.call.cns</span><br></pre></td></tr></table></figure>


</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> 生信分析日常 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
